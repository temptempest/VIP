//
//  NewsViewController.swift
//  VIP
//
//  Created by temptempest on 15.08.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol INewsViewController: AnyObject {
	func render(viewModel: News.ViewModel)
}

private enum L12 {
	static let rowHeight: CGFloat = 120
	static let cellType = UITableViewCell.self
	static let cellIdentifier = String(describing: cellType)
	static let cellNumberOfLines = 0
	static let failure = "Failure "
	static let backgroundColor = UIColor.secondarySystemBackground
}

final class NewsViewController: UIViewController, INewsViewController, UITableViewDelegate {
	var interactor: INewsInteractor?
	
	fileprivate typealias Category = NewsCategory
	fileprivate typealias DataSource = Category.DataSource
	fileprivate typealias Items = ArticlesList
	fileprivate typealias Item = News.Response.Article
	
	private lazy var tableView = makeTableView()
	private lazy var dataSource = makeDataSource()
	
	override func loadView() {
		super.loadView()
		setupUI()
		newsRequest()
	}
	
	func newsRequest() {
		let request = News.Request()
		interactor?.fetchData(request: request)
	}
	
	func render(viewModel: News.ViewModel) {
		switch viewModel {
		case .success(let articleList):
			configureDataSource(items: articleList)
		case .failure(let message):
			print(L12.failure, message)
		}
	}
}

//MARK: - DataSource
fileprivate extension NewsViewController {
	func makeDataSource() -> DataSource {
		DataSource(tableView: tableView, cellProvider: { (tableView, indexPath, item) -> UITableViewCell? in
			let cell = tableView.dequeueReusableCell(withIdentifier: L12.cellIdentifier, for: indexPath)
			cell.textLabel?.text = item.title
			cell.textLabel?.numberOfLines = L12.cellNumberOfLines
			cell.accessoryType = .disclosureIndicator
			cell.selectionStyle = .none
			return cell
		})
	}
	
	func configureDataSource(items: Items) {
		dataSource.defaultRowAnimation = .left
		var snapshot = NSDiffableDataSourceSnapshot<Category, Item>()
		for category in Category.allCases {
			snapshot.appendSections([category])
			snapshot.appendItems(items.articles)
		}
		OperationQueue.main.addOperation {
			self.dataSource.apply(snapshot, animatingDifferences: false)
		}
	}
}

//MARK: - UI
fileprivate extension NewsViewController {
	func setupUI() {
		navigationController?.navigationBar.prefersLargeTitles = true
		title = Category.title
		tableView.backgroundColor = L12.backgroundColor
		view.addSubview(tableView)
	}
	
	func makeTableView() -> UITableView {
		let tableView = UITableView(frame: view.bounds, style: .insetGrouped)
		tableView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
		tableView.tableFooterView = UIView()
		tableView.rowHeight = L12.rowHeight
		tableView.delegate = self
		tableView.register(L12.cellType, forCellReuseIdentifier: L12.cellIdentifier)
		return tableView
	}
}
